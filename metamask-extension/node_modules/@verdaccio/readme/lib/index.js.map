{"version":3,"sources":["../src/index.ts"],"names":["DOMPurify","JSDOM","window","parseReadme","readme","options","result","sanitize","trim","pathname","replace"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,SAAS,GAAG,wBAAgB,IAAIC,YAAJ,CAAU,EAAV,EAAcC,MAA9B,CAAlB;;AAEe,SAASC,WAAT,CAAqBC,MAArB,EACqBC,OAAqC,GAAG,EAD7D,EACgF;AAC7F,MAAIC,MAAJ;;AAEA,MAAIF,MAAJ,EAAY;AACVE,IAAAA,MAAM,GAAGN,SAAS,CAACO,QAAV,CACP,qBAAOH,MAAP,EAAe;AACbG,MAAAA,QAAQ,EAAE;AADG,KAAf,EAEGC,IAFH,EADO,CAAT;;AAMA,QAAI,aAAa,OAAOH,OAAO,CAACI,QAAhC,EAA0C;AACxCH,MAAAA,MAAM,GAAGA,MAAM,CAACI,OAAP,CAAe,WAAf,EAA6B,SAAQL,OAAO,CAACI,QAAS,GAAtD,CAAT;AACD;AACF;;AAED,SAAOH,MAAP;AACD","sourcesContent":["import marked from 'marked';\nimport createDOMPurify from 'dompurify';\nimport { JSDOM } from 'jsdom';\n\nconst DOMPurify = createDOMPurify(new JSDOM('').window);\n\nexport default function parseReadme(readme: string,\n                                    options: { pathname?: string | void } = {}): string | void {\n  let result;\n\n  if (readme) {\n    result = DOMPurify.sanitize(\n      marked(readme, {\n        sanitize: false,\n      }).trim()\n    );\n\n    if ('string' === typeof options.pathname) {\n      result = result.replace(/href=\"#/gi, `href=\"${options.pathname}#`);\n    }\n  }\n\n  return result;\n}\n"],"file":"index.js"}