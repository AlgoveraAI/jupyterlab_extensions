{"version":3,"file":"lib_index_js.32488ff561f9f8a3febe.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAoE;AACnB;AACK;AACO;AACtB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gDAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,+BAA+B;AACxE;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qEAAmB;AACnD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,0BAA0B,mBAAmB;AAC7C,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,+BAA+B;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAS;AACxB,eAAe,iEAAe,EAAE,uEAAmB,EAAE,gEAAW;AAChE;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;;;;;;;AC7IqD;AACC;AACrB;AACX;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2BAA2B,yDAAY;AAC9C;AACA;AACA,yCAAyC,mEAAc;AACvD;AACA;AACA;AACA;AACA;AACA,mCAAmC,gEAAc;AACjD;AACA;AACA;AACA,SAAS;AACT,oCAAoC,mEAAe;AACnD,+BAA+B,wEAAoB;AACnD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,sBAAsB,oFAAkC;AACxD;AACA,SAAS;AACT;AACA,gFAAgF,OAAO;AACvF,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAA4B;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@jupyterlab-examples/main-menu/./lib/index.js","webpack://@jupyterlab-examples/main-menu/./lib/panel.js"],"sourcesContent":["import { ICommandPalette, InputDialog } from '@jupyterlab/apputils';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ExamplePanel } from './panel';\n/**\n * The command IDs used by the console plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.create = 'kernel-output:create';\n    CommandIDs.execute = 'kernel-output:execute';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Activate the JupyterLab extension.\n *\n * @param app Jupyter Front End\n * @param palette Jupyter Commands Palette\n * @param rendermime Jupyter Render Mime Registry\n * @param translator Jupyter Translator\n * @param launcher [optional] Jupyter Launcher\n */\nfunction activate(app, palette, rendermime, translator, launcher) {\n    const manager = app.serviceManager;\n    const { commands, shell } = app;\n    const category = 'Extension Examples';\n    const trans = translator.load('jupyterlab');\n    let panel;\n    /**\n     * Creates a example panel.\n     *\n     * @returns The panel\n     */\n    async function createPanel() {\n        panel = new ExamplePanel(manager, rendermime, translator);\n        shell.add(panel, 'main');\n        return panel;\n    }\n    // Add a command\n    const command = 'connect_wallet';\n    commands.addCommand(command, {\n        label: 'connect wallet',\n        caption: 'connect wallet',\n        execute: (args) => {\n            getAccount();\n            console.log('accounts');\n            console.log(accounts);\n            // window.ethereum.request({ method: 'eth_requestAccounts' });\n            console.log(`METAMASK EXTENSION LOADED.`);\n        },\n    });\n    // Add a command\n    const command2 = 'send_transaction';\n    commands.addCommand(command2, {\n        label: 'send transaction',\n        caption: 'send transaction',\n        execute: (args) => {\n            window.ethereum\n                .request({\n                method: 'eth_sendTransaction',\n                params: [\n                    {\n                        from: accounts[0],\n                        to: '0x8b8115a4b5B97f59B57DC8d5c3BbaCb16140f785',\n                        value: '0x29a2241af62c0000',\n                        gasPrice: '0x09184e72a000',\n                        gas: '0x2710',\n                    },\n                ],\n            })\n                .then((txHash) => console.log(txHash))\n                .catch((error) => console.error);\n            console.log(`METAMASK EXTENSION LOADED.`);\n        },\n    });\n    // Add a command\n    const command3 = 'ocean_transaction';\n    commands.addCommand(command3, {\n        label: 'ocean transaction',\n        caption: 'ocean transaction',\n        execute: (args) => {\n            console.log('OCEAN EXTENSION LOADED');\n        },\n    });\n    // add commands to registry\n    commands.addCommand(CommandIDs.create, {\n        label: trans.__('Open the Kernel Output Panel'),\n        caption: trans.__('Open the Kernel Output Panel'),\n        execute: createPanel,\n    });\n    commands.addCommand(CommandIDs.execute, {\n        label: trans.__('Contact Kernel and Execute Code'),\n        caption: trans.__('Contact Kernel and Execute Code'),\n        execute: async () => {\n            // Create the panel if it does not exist\n            if (!panel) {\n                await createPanel();\n            }\n            // Prompt the user about the statement to be executed\n            const input = await InputDialog.getText({\n                title: trans.__('Code to execute'),\n                okLabel: trans.__('Execute'),\n                placeholder: trans.__('Statement to execute'),\n            });\n            // Execute the statement\n            if (input.button.accept) {\n                const code = input.value;\n                panel.execute(code);\n            }\n        },\n    });\n    // add items in command palette and menu\n    [CommandIDs.create, CommandIDs.execute].forEach((command) => {\n        palette.addItem({ command, category });\n    });\n    // Add launcher\n    if (launcher) {\n        launcher.add({\n            command: CommandIDs.create,\n            category: category,\n        });\n    }\n}\n// const provider = new ethers.providers.Web3Provider(window.ethereum)\n// const signer = provider.getSigner()\n// signer.connect(provider)\n// console.log(signer)\nlet accounts = [];\nasync function getAccount() {\n    accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n}\n/**\n * Initialization data for the main menu example.\n */\nconst extension = {\n    id: 'metamask_extension',\n    autoStart: true,\n    optional: [ILauncher],\n    requires: [ICommandPalette, IRenderMimeRegistry, ITranslator],\n    activate: activate\n};\nexport default extension;\n","import { SessionContext, sessionContextDialogs, } from '@jupyterlab/apputils';\nimport { OutputAreaModel, SimplifiedOutputArea } from '@jupyterlab/outputarea';\nimport { nullTranslator, } from '@jupyterlab/translation';\nimport { StackedPanel } from '@lumino/widgets';\n/**\n * The class name added to the example panel.\n */\nconst PANEL_CLASS = 'jp-RovaPanel';\n/**\n * A panel with the ability to add other children.\n */\nexport class ExamplePanel extends StackedPanel {\n    constructor(manager, rendermime, translator) {\n        super();\n        this._translator = translator || nullTranslator;\n        this._trans = this._translator.load('jupyterlab');\n        this.addClass(PANEL_CLASS);\n        this.id = 'kernel-output-panel';\n        this.title.label = this._trans.__('Kernel Output Example View');\n        this.title.closable = true;\n        this._sessionContext = new SessionContext({\n            sessionManager: manager.sessions,\n            specsManager: manager.kernelspecs,\n            name: 'Kernel Output',\n        });\n        this._outputareamodel = new OutputAreaModel();\n        this._outputarea = new SimplifiedOutputArea({\n            model: this._outputareamodel,\n            rendermime: rendermime,\n        });\n        this.addWidget(this._outputarea);\n        void this._sessionContext\n            .initialize()\n            .then(async (value) => {\n            if (value) {\n                await sessionContextDialogs.selectKernel(this._sessionContext);\n            }\n        })\n            .catch((reason) => {\n            console.error(`Failed to initialize the session in ExamplePanel.\\n${reason}`);\n        });\n    }\n    get session() {\n        return this._sessionContext;\n    }\n    dispose() {\n        this._sessionContext.dispose();\n        super.dispose();\n    }\n    execute(code) {\n        SimplifiedOutputArea.execute(code, this._outputarea, this._sessionContext)\n            .then((msg) => {\n            console.log(msg);\n        })\n            .catch((reason) => console.error(reason));\n    }\n    onCloseRequest(msg) {\n        super.onCloseRequest(msg);\n        this.dispose();\n    }\n}\n"],"names":[],"sourceRoot":""}