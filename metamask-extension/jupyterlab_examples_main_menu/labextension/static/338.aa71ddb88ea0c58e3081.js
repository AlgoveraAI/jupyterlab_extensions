"use strict";(self.webpackChunkjupyterlab_metamask_extension=self.webpackChunkjupyterlab_metamask_extension||[]).push([[338],{338:(e,t,a)=>{a.r(t),a.d(t,{default:()=>p});var n,o=a(618),s=a(355),c=a(377),l=a(376),i=a(133),r=a(706);class u extends r.StackedPanel{constructor(e,t,a){super(),this._translator=a||c.nullTranslator,this._trans=this._translator.load("jupyterlab"),this.addClass("jp-RovaPanel"),this.id="kernel-output-panel",this.title.label=this._trans.__("Kernel Output Example View"),this.title.closable=!0,this._sessionContext=new o.SessionContext({sessionManager:e.sessions,specsManager:e.kernelspecs,name:"Kernel Output"}),this._outputareamodel=new i.OutputAreaModel,this._outputarea=new i.SimplifiedOutputArea({model:this._outputareamodel,rendermime:t}),this.addWidget(this._outputarea),this._sessionContext.initialize().then((async e=>{e&&await o.sessionContextDialogs.selectKernel(this._sessionContext)})).catch((e=>{console.error(`Failed to initialize the session in ExamplePanel.\n${e}`)}))}get session(){return this._sessionContext}dispose(){this._sessionContext.dispose(),super.dispose()}execute(e){i.SimplifiedOutputArea.execute(e,this._outputarea,this._sessionContext).then((e=>{console.log(e)})).catch((e=>console.error(e)))}onCloseRequest(e){super.onCloseRequest(e),this.dispose()}}!function(e){e.create="kernel-output:create",e.execute="kernel-output:execute"}(n||(n={}));let d=[];const p={id:"metamask_extension",autoStart:!0,optional:[s.ILauncher],requires:[o.ICommandPalette,l.IRenderMimeRegistry,c.ITranslator],activate:function(e,t,a,s,c){const l=e.serviceManager,{commands:i,shell:r}=e,p="Extension Examples",m=s.load("jupyterlab");let h;async function _(){return h=new u(l,a,s),r.add(h,"main"),h}i.addCommand("connect_wallet",{label:"connect wallet",caption:"connect wallet",execute:e=>{!async function(){d=await window.ethereum.request({method:"eth_requestAccounts"})}(),console.log("accounts"),console.log(d),console.log("METAMASK EXTENSION LOADED.")}}),i.addCommand("send_transaction",{label:"send transaction",caption:"send transaction",execute:e=>{window.ethereum.request({method:"eth_sendTransaction",params:[{from:d[0],to:"0x2f318C334780961FB129D2a6c30D0763d9a5C970",value:"0x29a2241af62c0000",gasPrice:"0x09184e72a000",gas:"0x2710"}]}).then((e=>console.log(e))).catch((e=>console.error)),console.log("METAMASK EXTENSION LOADED.")}}),i.addCommand("ocean_transaction",{label:"ocean transaction",caption:"ocean transaction",execute:e=>{console.log("OCEAN EXTENSION LOADED")}}),i.addCommand(n.create,{label:m.__("Open the Kernel Output Panel"),caption:m.__("Open the Kernel Output Panel"),execute:_}),i.addCommand(n.execute,{label:m.__("Contact Kernel and Execute Code"),caption:m.__("Contact Kernel and Execute Code"),execute:async()=>{h||await _();const e=await o.InputDialog.getText({title:m.__("Code to execute"),okLabel:m.__("Execute"),placeholder:m.__("Statement to execute")});if(e.button.accept){const t=e.value;h.execute(t)}}}),[n.create,n.execute].forEach((e=>{t.addItem({command:e,category:p})})),c&&c.add({command:n.create,category:p})}}}}]);