{"version":3,"file":"lib_widget_js.e6d435847171a7800a7a.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA,aAAa,mBAAO,CAAC,uCAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AAC0D;AACF;AACC;AACC;AACb;AACA;AAC2B;AAC3B;AACyH;AACtK;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACwD;AACJ;AACP;AACY;AACzD;AACA;AACA;AACO,mCAAmC,8DAAW;AACrD;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB,oMAAoM;AACxQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gCAAgC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB,IAAI;AACtD,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAK;AACrB;AACA;AACA;AACA;AACA,QAAQ,sEAAuB;AAC/B;AACA;AACA;AACA;AACA;AACA,mDAAmD,EAAE,0EAAuB;AAC5E;AACA,oCAAoC,iDAAW;AAC/C,4CAA4C,oDAAc;AAC1D;AACA;AACA,2CAA2C,oDAAc;AACzD;AACA;AACA;AACA;AACA;AACA,iCAAiC,kEAAa;AAC9C,CAAC,0BAA0B;AAC3B;;;;;;;;;;;;;;;;;AC7IA;AACA;AACqE;AACZ;AACzD;AACA;AACA;AACO,mCAAmC,8DAAW;AACrD;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB,kKAAkK;AACtO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oBAAoB,IAAI;AAC5C;AACA;AACA;AACA;AACA,mDAAmD,EAAE,6EAA0B;AAC/E;AACA,oCAAoC,iDAAW;AAC/C,4CAA4C,oDAAc;AAC1D;AACA;AACA,2CAA2C,oDAAc;AACzD;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACwD;AACa;AACZ;AACzD;AACA;AACA;AACO,kCAAkC,8DAAW;AACpD;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB,2KAA2K;AAC/O;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,2BAA2B;AAC3C,0BAA0B,GAAG,GAAG,SAAS;AACzC;AACA;AACA;AACA;AACA,6CAA6C,mCAAmC;AAChF;AACA;AACA;AACA,kDAAkD,EAAE,6EAA0B;AAC9E;AACA,mCAAmC,iDAAW;AAC9C,2CAA2C,oDAAc;AACzD;AACA;AACA,0CAA0C,oDAAc;AACxD;AACA;AACA;AACA;AACA;AACA,8BAA8B,kEAAa;AAC3C,CAAC,0BAA0B;AAC3B;;;;;;;;;;;;;;;;;AClFA;AACA;AACsD;AACG;AACzD;AACA;AACA;AACO,yBAAyB,gEAAS;AACzC;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB,oIAAoI;AACxM;AACA;AACA;AACA,0BAA0B,iDAAW;AACrC,kCAAkC,oDAAc;AAChD;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACoD;AACR;AACa;AACzD;AACA;AACA;AACO,kCAAkC,8DAAW;AACpD;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB,oMAAoM;AACxQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+BAA+B,IAAI;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6BAA6B,IAAI;AACjE,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0DAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0DAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,EAAE,0EAAuB;AAC3E;AACA,mCAAmC,iDAAW;AAC9C,2CAA2C,oDAAc;AACzD;AACA;AACA,0CAA0C,oDAAc;AACxD;;;;;;;;;;;;;;;;;;;;;;;ACzGA;AACA;AACgD;AACoB;AACvB;AACG;AACS;AACzD;AACA;AACA;AACO,yBAAyB,8DAAW;AAC3C;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB,kJAAkJ;AACtN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mCAAmC;AACnD,4BAA4B,oEAAa;AACzC,oEAAoE;AACpE,4BAA4B,oEAAa;AACzC;AACA,yDAAyD,sEAAoB;AAC7E,QAAQ,6EAA8B;AACtC;AACA;AACA;AACA,oBAAoB,sEAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,kBAAkB,IAAI;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE,0EAAuB;AAClE;AACA,0BAA0B,iDAAW;AACrC,kCAAkC,oDAAc;AAChD;AACA;AACA,iCAAiC,oDAAc;AAC/C;;;;;;;;;;;;;;;;;;;;;;;ACvHA;AACA;AACqD;AACR;AACtB;AACc;AACoB;AACzD;AACA;AACA;AACA,4CAA4C,uDAAU;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,8BAA8B,8CAAU;AAC/C;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB,mSAAmS;AACvW;AACA;AACA;AACA,+BAA+B,iDAAW;AAC1C,uCAAuC,oDAAc;AACrD;AACA,8BAA8B,iDAAW;AACzC,mCAAmC,oDAAc;AACjD;AACA;AACA;AACO,6BAA6B,+DAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;ACnHA;AACA;AACoD;AACK;AACzD;AACA;AACA;AACO,yBAAyB,8DAAW;AAC3C;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB,oIAAoI;AACxM;AACA;AACA;AACA,0BAA0B,iDAAW;AACrC,kCAAkC,oDAAc;AAChD;AACA;AACA,iCAAiC,oDAAc;AAC/C","sources":["webpack://ipylab/./lib/version.js","webpack://ipylab/./lib/widget.js","webpack://ipylab/./lib/widgets/commands.js","webpack://ipylab/./lib/widgets/frontend.js","webpack://ipylab/./lib/widgets/palette.js","webpack://ipylab/./lib/widgets/panel.js","webpack://ipylab/./lib/widgets/sessions.js","webpack://ipylab/./lib/widgets/shell.js","webpack://ipylab/./lib/widgets/split_panel.js","webpack://ipylab/./lib/widgets/title.js"],"sourcesContent":["// Copyright (c) ipylab contributors\n// Distributed under the terms of the Modified BSD License.\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst data = require('../package.json');\n/**\n * The _model_module_version/_view_module_version this package implements.\n *\n * The html widget manager assumes that this is the same as the npm package\n * version number.\n */\nexport const MODULE_VERSION = data.version;\n/*\n * The current package name.\n */\nexport const MODULE_NAME = data.name;\n//# sourceMappingURL=version.js.map","// Copyright (c) ipylab contributors\n// Distributed under the terms of the Modified BSD License.\nimport { CommandRegistryModel } from './widgets/commands';\nimport { CommandPaletteModel } from './widgets/palette';\nimport { SessionManagerModel } from './widgets/sessions';\nimport { JupyterFrontEndModel } from './widgets/frontend';\nimport { PanelModel } from './widgets/panel';\nimport { ShellModel } from './widgets/shell';\nimport { SplitPanelModel, SplitPanelView } from './widgets/split_panel';\nimport { TitleModel } from './widgets/title';\nexport { CommandRegistryModel, CommandPaletteModel, JupyterFrontEndModel, PanelModel, ShellModel, SplitPanelModel, SplitPanelView, TitleModel, SessionManagerModel, };\n//# sourceMappingURL=widget.js.map","// Copyright (c) ipylab contributors\n// Distributed under the terms of the Modified BSD License.\nimport { ObservableMap } from '@jupyterlab/observables';\nimport { WidgetModel } from '@jupyter-widgets/base';\nimport { ArrayExt } from '@lumino/algorithm';\nimport { MODULE_NAME, MODULE_VERSION } from '../version';\n/**\n * The model for a command registry.\n */\nexport class CommandRegistryModel extends WidgetModel {\n    /**\n     * The default attributes.\n     */\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: CommandRegistryModel.model_name, _model_module: CommandRegistryModel.model_module, _model_module_version: CommandRegistryModel.model_module_version, _command_list: [], _commands: [] });\n    }\n    /**\n     * Initialize a CommandRegistryModel instance.\n     *\n     * @param attributes The base attributes.\n     * @param options The initialization options.\n     */\n    initialize(attributes, options) {\n        this._commands = CommandRegistryModel.commands;\n        super.initialize(attributes, options);\n        this.on('msg:custom', this._onMessage.bind(this));\n        this.on('comm_live_update', () => {\n            if (this.comm_live) {\n                return;\n            }\n            Private.customCommands.values().forEach((command) => command.dispose());\n            this._sendCommandList();\n        });\n        // restore existing commands\n        const commands = this.get('_commands');\n        commands.forEach((command) => this._addCommand(command));\n        this._sendCommandList();\n    }\n    /**\n     * Handle a custom message from the backend.\n     *\n     * @param msg The message to handle.\n     */\n    _onMessage(msg) {\n        switch (msg.func) {\n            case 'execute':\n                this._execute(msg.payload);\n                break;\n            case 'addCommand': {\n                this._addCommand(msg.payload);\n                // keep track of the commands\n                const commands = this.get('_commands');\n                this.set('_commands', commands.concat(msg.payload));\n                this.save_changes();\n                break;\n            }\n            case 'removeCommand':\n                this._removeCommand(msg.payload);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Send the list of commands to the backend.\n     */\n    _sendCommandList() {\n        this._commands.notifyCommandChanged();\n        this.set('_command_list', this._commands.listCommands());\n        this.save_changes();\n    }\n    /**\n     * Execute a command\n     *\n     * @param bundle The command bundle.\n     */\n    _execute(bundle) {\n        const { id, args } = bundle;\n        void this._commands.execute(id, args);\n    }\n    /**\n     * Add a new command to the command registry.\n     *\n     * @param options The command options.\n     */\n    _addCommand(options) {\n        const { id, caption, label, iconClass } = options;\n        if (this._commands.hasCommand(id)) {\n            Private.customCommands.get(id).dispose();\n        }\n        const commandEnabled = (command) => {\n            return !command.isDisposed && !!this.comm && this.comm_live;\n        };\n        const command = this._commands.addCommand(id, {\n            caption,\n            label,\n            iconClass,\n            execute: () => {\n                if (!this.comm_live) {\n                    command.dispose();\n                    return;\n                }\n                this.send({ event: 'execute', id }, {});\n            },\n            isEnabled: () => commandEnabled(command),\n            isVisible: () => commandEnabled(command),\n        });\n        Private.customCommands.set(id, command);\n        this._sendCommandList();\n    }\n    /**\n     * Remove a command from the command registry.\n     *\n     * @param bundle The command bundle.\n     */\n    _removeCommand(bundle) {\n        const { id } = bundle;\n        if (Private.customCommands.has(id)) {\n            Private.customCommands.get(id).dispose();\n        }\n        const commands = this.get('_commands').slice();\n        ArrayExt.removeAllWhere(commands, (w) => w.id === id);\n        this.set('_commands', commands);\n        this.save_changes();\n        this._sendCommandList();\n    }\n}\nCommandRegistryModel.serializers = Object.assign({}, WidgetModel.serializers);\nCommandRegistryModel.model_name = 'CommandRegistryModel';\nCommandRegistryModel.model_module = MODULE_NAME;\nCommandRegistryModel.model_module_version = MODULE_VERSION;\nCommandRegistryModel.view_name = null;\nCommandRegistryModel.view_module = null;\nCommandRegistryModel.view_module_version = MODULE_VERSION;\n/**\n * A namespace for private data\n */\nvar Private;\n(function (Private) {\n    Private.customCommands = new ObservableMap();\n})(Private || (Private = {}));\n//# sourceMappingURL=commands.js.map","// Copyright (c) ipylab contributors\n// Distributed under the terms of the Modified BSD License.\nimport { DOMWidgetModel, WidgetModel, } from '@jupyter-widgets/base';\nimport { MODULE_NAME, MODULE_VERSION } from '../version';\n/**\n * The model for a JupyterFrontEnd.\n */\nexport class JupyterFrontEndModel extends WidgetModel {\n    /**\n     * The default attributes.\n     */\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: JupyterFrontEndModel.model_name, _model_module: JupyterFrontEndModel.model_module, _model_module_version: JupyterFrontEndModel.model_module_version });\n    }\n    /**\n     * Initialize a JupyterFrontEndModel instance.\n     *\n     * @param attributes The base attributes.\n     * @param options The initialization options.\n     */\n    initialize(attributes, options) {\n        this._app = JupyterFrontEndModel.app;\n        super.initialize(attributes, options);\n        this.send({ event: 'lab_ready' }, {});\n        this.set('version', this._app.version);\n        this.save_changes();\n    }\n}\nJupyterFrontEndModel.serializers = Object.assign({}, DOMWidgetModel.serializers);\nJupyterFrontEndModel.model_name = 'JupyterFrontEndModel';\nJupyterFrontEndModel.model_module = MODULE_NAME;\nJupyterFrontEndModel.model_module_version = MODULE_VERSION;\nJupyterFrontEndModel.view_name = null;\nJupyterFrontEndModel.view_module = null;\nJupyterFrontEndModel.view_module_version = MODULE_VERSION;\n//# sourceMappingURL=frontend.js.map","// Copyright (c) ipylab contributors\n// Distributed under the terms of the Modified BSD License.\nimport { ObservableMap } from '@jupyterlab/observables';\nimport { DOMWidgetModel, WidgetModel, } from '@jupyter-widgets/base';\nimport { MODULE_NAME, MODULE_VERSION } from '../version';\n/**\n * The model for a command palette.\n */\nexport class CommandPaletteModel extends WidgetModel {\n    /**\n     * The default attributes.\n     */\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: CommandPaletteModel.model_name, _model_module: CommandPaletteModel.model_module, _model_module_version: CommandPaletteModel.model_module_version, _items: [] });\n    }\n    /**\n     * Initialize a CommandPaletteModel instance.\n     *\n     * @param attributes The base attributes.\n     * @param options The initialization options.\n     */\n    initialize(attributes, options) {\n        this._palette = CommandPaletteModel.palette;\n        super.initialize(attributes, options);\n        this.on('msg:custom', this._onMessage.bind(this));\n        // restore existing items\n        const items = this.get('_items');\n        items.forEach((item) => this._addItem(item));\n    }\n    /**\n     * Handle a custom message from the backend.\n     *\n     * @param msg The message to handle.\n     */\n    _onMessage(msg) {\n        switch (msg.func) {\n            case 'addItem': {\n                this._addItem(msg.payload);\n                // keep track of the items\n                const items = this.get('_items');\n                this.set('_items', items.concat(msg.payload));\n                this.save_changes();\n                break;\n            }\n            default:\n                break;\n        }\n    }\n    /**\n     * Add a new item to the command palette.\n     *\n     * @param options The item options.\n     */\n    _addItem(options) {\n        if (!this._palette) {\n            // no-op if no palette\n            return;\n        }\n        const { id, category, args, rank } = options;\n        const itemId = `${id}-${category}`;\n        if (Private.customItems.has(itemId)) {\n            // no-op if the item is already in the palette\n            return;\n        }\n        const item = this._palette.addItem({ command: id, category, args, rank });\n        Private.customItems.set(itemId, item);\n    }\n}\nCommandPaletteModel.serializers = Object.assign({}, DOMWidgetModel.serializers);\nCommandPaletteModel.model_name = 'CommandPaletteModel';\nCommandPaletteModel.model_module = MODULE_NAME;\nCommandPaletteModel.model_module_version = MODULE_VERSION;\nCommandPaletteModel.view_name = null;\nCommandPaletteModel.view_module = null;\nCommandPaletteModel.view_module_version = MODULE_VERSION;\n/**\n * A namespace for private data\n */\nvar Private;\n(function (Private) {\n    Private.customItems = new ObservableMap();\n})(Private || (Private = {}));\n//# sourceMappingURL=palette.js.map","// Copyright (c) ipylab contributors\n// Distributed under the terms of the Modified BSD License.\nimport { VBoxModel } from '@jupyter-widgets/controls';\nimport { MODULE_NAME, MODULE_VERSION } from '../version';\n/**\n * The model for a panel.\n */\nexport class PanelModel extends VBoxModel {\n    /**\n     * The default attributes.\n     */\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: PanelModel.model_name, _model_module: PanelModel.model_module, _model_module_version: PanelModel.model_module_version });\n    }\n}\nPanelModel.model_name = 'PanelModel';\nPanelModel.model_module = MODULE_NAME;\nPanelModel.model_module_version = MODULE_VERSION;\n//# sourceMappingURL=panel.js.map","// Copyright (c) ipylab contributors\n// Distributed under the terms of the Modified BSD License.\nimport { WidgetModel } from '@jupyter-widgets/base';\nimport { toArray } from '@lumino/algorithm';\nimport { MODULE_NAME, MODULE_VERSION } from '../version';\n/**\n * The model for a Session Manager\n */\nexport class SessionManagerModel extends WidgetModel {\n    /**\n     * The default attributes.\n     */\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: SessionManagerModel.model_name, _model_module: SessionManagerModel.model_module, _model_module_version: SessionManagerModel.model_module_version, current_session: null, sessions: [] });\n    }\n    /**\n     * Initialize a SessionManagerModel instance.\n     *\n     * @param attributes The base attributes.\n     * @param options The initialization options.\n     */\n    initialize(attributes, options) {\n        const { labShell, sessions, shell } = SessionManagerModel;\n        this._sessions = sessions;\n        this._shell = shell;\n        this._labShell = labShell;\n        sessions.runningChanged.connect(this._sendSessions, this);\n        super.initialize(attributes, options);\n        this.on('msg:custom', this._onMessage.bind(this));\n        if (this._labShell) {\n            this._labShell.currentChanged.connect(this._currentChanged, this);\n            this._labShell.activeChanged.connect(this._currentChanged, this);\n        }\n        else {\n            this._currentChanged();\n        }\n        this._sendSessions();\n        this._sendCurrent();\n        this.send({ event: 'sessions_initialized' }, {});\n    }\n    /**\n     * Handle a custom message from the backend.\n     *\n     * @param msg The message to handle.\n     */\n    _onMessage(msg) {\n        switch (msg.func) {\n            case 'refreshRunning':\n                this._sessions.refreshRunning().then(() => {\n                    this.send({ event: 'sessions_refreshed' }, {});\n                });\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * get sessionContext from a given widget instance\n     *\n     * @param widget widget tracked by app.shell._track (FocusTracker)\n     */\n    _getSessionContext(widget) {\n        var _a, _b, _c;\n        return (_c = (_b = (_a = widget === null || widget === void 0 ? void 0 : widget.sessionContext) === null || _a === void 0 ? void 0 : _a.session) === null || _b === void 0 ? void 0 : _b.model) !== null && _c !== void 0 ? _c : {};\n    }\n    /**\n     * Handle focus change in JLab\n     *\n     * NOTE: currentChange fires on two situations that we are concerned about here:\n     * 1. when user focuses on a widget in browser, which the `change.newValue` will\n     *  be the current Widget\n     * 2. when user executes a code in console/notebook, where the `changed.newValue` will be null since\n     *  we lost focus due to execution.\n     * To solve this problem, we interrogate `this._tracker.currentWidget` directly.\n     * We also added a simple fencing to reduce the number of Comm sync calls between Python/JS\n     */\n    _currentChanged() {\n        this._current_session = this._getSessionContext(this._shell.currentWidget);\n        this.set('current_session', this._current_session);\n        this.set('sessions', toArray(this._sessions.running()));\n        this.save_changes();\n    }\n    /**\n     * Send the list of sessions to the backend.\n     */\n    _sendSessions() {\n        this.set('sessions', toArray(this._sessions.running()));\n        this.save_changes();\n    }\n    /**\n     * send current session to backend\n     */\n    _sendCurrent() {\n        this._current_session = this._getSessionContext(this._shell.currentWidget);\n        this.set('current_session', this._current_session);\n        this.save_changes();\n    }\n}\nSessionManagerModel.serializers = Object.assign({}, WidgetModel.serializers);\nSessionManagerModel.model_name = 'SessionManagerModel';\nSessionManagerModel.model_module = MODULE_NAME;\nSessionManagerModel.model_module_version = MODULE_VERSION;\nSessionManagerModel.view_name = null;\nSessionManagerModel.view_module = null;\nSessionManagerModel.view_module_version = MODULE_VERSION;\n//# sourceMappingURL=sessions.js.map","// Copyright (c) ipylab contributors\n// Distributed under the terms of the Modified BSD License.\nimport { DOMUtils } from '@jupyterlab/apputils';\nimport { WidgetModel, unpack_models, } from '@jupyter-widgets/base';\nimport { ArrayExt } from '@lumino/algorithm';\nimport { MessageLoop } from '@lumino/messaging';\nimport { MODULE_NAME, MODULE_VERSION } from '../version';\n/**\n * The model for a shell.\n */\nexport class ShellModel extends WidgetModel {\n    /**\n     * The default attributes.\n     */\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: ShellModel.model_name, _model_module: ShellModel.model_module, _model_module_version: ShellModel.model_module_version, _widgets: [] });\n    }\n    /**\n     * Initialize a ShellModel instance.\n     *\n     * @param attributes The base attributes.\n     * @param options The initialization options.\n     */\n    initialize(attributes, options) {\n        this._shell = ShellModel.shell;\n        this._labShell = ShellModel.labShell;\n        super.initialize(attributes, options);\n        this.on('msg:custom', this._onMessage.bind(this));\n        // restore existing widgets\n        const widgets = this.get('_widgets');\n        widgets.forEach((w) => this._add(w));\n    }\n    /**\n     * Add a widget to the application shell\n     *\n     * @param payload The payload to add\n     */\n    async _add(payload) {\n        const { serializedWidget, area, args, id } = payload;\n        const model = await unpack_models(serializedWidget, this.widget_manager);\n        const view = await this.widget_manager.create_view(model, {});\n        const title = await unpack_models(model.get('title'), this.widget_manager);\n        const pWidget = view.pWidget;\n        pWidget.id = id !== null && id !== void 0 ? id : DOMUtils.createDomID();\n        MessageLoop.installMessageHook(pWidget, (handler, msg) => {\n            switch (msg.type) {\n                case 'close-request': {\n                    const widgets = this.get('_widgets').slice();\n                    ArrayExt.removeAllWhere(widgets, (w) => w.id === handler.id);\n                    this.set('_widgets', widgets);\n                    this.save_changes();\n                    break;\n                }\n            }\n            return true;\n        });\n        const updateTitle = () => {\n            pWidget.title.label = title.get('label');\n            pWidget.title.iconClass = title.get('icon_class');\n            pWidget.title.closable = title.get('closable');\n        };\n        title.on('change', updateTitle);\n        updateTitle();\n        if ((area === 'left' || area === 'right') && this._labShell) {\n            let handler;\n            if (area === 'left') {\n                handler = this._labShell['_leftHandler'];\n            }\n            else {\n                handler = this._labShell['_rightHandler'];\n            }\n            // handle tab closed event\n            handler.sideBar.tabCloseRequested.connect((sender, tab) => {\n                tab.title.owner.close();\n            });\n            pWidget.addClass('jp-SideAreaWidget');\n        }\n        this._shell.add(pWidget, area, args);\n        return pWidget.id;\n    }\n    /**\n     * Handle a custom message from the backend.\n     *\n     * @param msg The message to handle.\n     */\n    async _onMessage(msg) {\n        switch (msg.func) {\n            case 'add': {\n                const id = await this._add(msg.payload);\n                // keep track of the widgets added to the shell\n                const widgets = this.get('_widgets');\n                this.set('_widgets', widgets.concat(Object.assign(Object.assign({}, msg.payload), { id })));\n                this.save_changes();\n                break;\n            }\n            case 'expandLeft': {\n                if (this._labShell) {\n                    this._labShell.expandLeft();\n                }\n                break;\n            }\n            case 'expandRight': {\n                if (this._labShell) {\n                    this._labShell.expandRight();\n                }\n                break;\n            }\n            default:\n                break;\n        }\n    }\n}\nShellModel.serializers = Object.assign({}, WidgetModel.serializers);\nShellModel.model_name = 'ShellModel';\nShellModel.model_module = MODULE_NAME;\nShellModel.model_module_version = MODULE_VERSION;\nShellModel.view_name = null;\nShellModel.view_module = null;\nShellModel.view_module_version = MODULE_VERSION;\n//# sourceMappingURL=shell.js.map","// Copyright (c) ipylab contributors\n// Distributed under the terms of the Modified BSD License.\nimport { VBoxView } from '@jupyter-widgets/controls';\nimport { SplitPanel } from '@lumino/widgets';\nimport $ from 'jquery';\nimport { PanelModel } from './panel';\nimport { MODULE_NAME, MODULE_VERSION } from '../version';\n/**\n * A Lumino widget for split panels.\n */\nclass JupyterLuminoSplitPanelWidget extends SplitPanel {\n    /**\n     * Construct a new JupyterLuminoSplitPanelWidget.\n     *\n     * @param options The instantiation options for a JupyterLuminoSplitPanelWidget.\n     */\n    constructor(options) {\n        const view = options.view;\n        delete options.view;\n        super(options);\n        this.addClass('jp-JupyterLuminoSplitPanelWidget');\n        this._view = view;\n    }\n    /**\n     * Handle a lumino message.\n     *\n     * @param msg The message to handle.\n     */\n    processMessage(msg) {\n        super.processMessage(msg);\n        this._view.processPhosphorMessage(msg);\n    }\n    /**\n     * Dispose the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        if (this._view) {\n            this._view.remove();\n        }\n        this._view = null;\n    }\n}\n/**\n * The model for a split panel.\n */\nexport class SplitPanelModel extends PanelModel {\n    /**\n     * The default attributes.\n     */\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: SplitPanelModel.model_name, _model_module: SplitPanelModel.model_module, _model_module_version: SplitPanelModel.model_module_version, _view_name: SplitPanelModel.model_name, _view_module: SplitPanelModel.model_module, _view_module_version: SplitPanelModel.model_module_version });\n    }\n}\nSplitPanelModel.model_name = 'SplitPanelModel';\nSplitPanelModel.model_module = MODULE_NAME;\nSplitPanelModel.model_module_version = MODULE_VERSION;\nSplitPanelModel.view_name = 'SplitPanelView';\nSplitPanelModel.view_module = MODULE_NAME;\nSplitPanelModel.view_module_name = MODULE_VERSION;\n/**\n * The view for a split panel.\n */\nexport class SplitPanelView extends VBoxView {\n    /**\n     * Create the widget and return the DOM element.\n     *\n     * @param tagName the tag name\n     */\n    _createElement(tagName) {\n        this.pWidget = new JupyterLuminoSplitPanelWidget({\n            view: this,\n            orientation: this.model.get('orientation'),\n        });\n        return this.pWidget.node;\n    }\n    /**\n     * Set the DOM element.\n     *\n     * @param el The element.\n     */\n    _setElement(el) {\n        if (this.el || el !== this.pWidget.node) {\n            throw new Error('Cannot reset the DOM element.');\n        }\n        this.el = this.pWidget.node;\n        this.$el = $(this.pWidget.node);\n    }\n    /**\n     * Initialize a SplitPanelView instance.\n     *\n     * @param parameters The view parameters.\n     */\n    initialize(parameters) {\n        super.initialize(parameters);\n        const pWidget = this.pWidget;\n        this.model.on('change:orientation', () => {\n            const orientation = this.model.get('orientation');\n            pWidget.orientation = orientation;\n        });\n    }\n    /**\n     * Render the view.\n     */\n    async render() {\n        super.render();\n        const views = await Promise.all(this.children_views.views);\n        views.forEach(async (view) => {\n            this.pWidget.addWidget(view.pWidget);\n        });\n    }\n}\n//# sourceMappingURL=split_panel.js.map","// Copyright (c) ipylab contributors\n// Distributed under the terms of the Modified BSD License.\nimport { WidgetModel } from '@jupyter-widgets/base';\nimport { MODULE_NAME, MODULE_VERSION } from '../version';\n/**\n * The model for a title widget.\n */\nexport class TitleModel extends WidgetModel {\n    /**\n     * The default attributes.\n     */\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: TitleModel.model_name, _model_module: TitleModel.model_module, _model_module_version: TitleModel.model_module_version });\n    }\n}\nTitleModel.model_name = 'TitleModel';\nTitleModel.model_module = MODULE_NAME;\nTitleModel.model_module_version = MODULE_VERSION;\nTitleModel.view_name = null;\nTitleModel.view_module = null;\nTitleModel.view_module_version = MODULE_VERSION;\n//# sourceMappingURL=title.js.map"],"names":[],"sourceRoot":""}